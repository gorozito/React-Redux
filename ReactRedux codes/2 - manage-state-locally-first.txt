class DisplayMessages extends React.Component {
  constructor(props) {
    super(props);
    
    /*
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind

    El binding es necesario para asociar un contexto dinámico, al momento de hacer referencia mediante this; de manera que podamos acceder a props/state actualizados. 
    El binding puede efectuarse en el constructor o en la misma línea. 

    */
       
    this.state = { input: "", messages: [] };    
  }
  
  handleChange(event) {
    this.setState({
      input: event.target.value      
    });
  }

  submitMessage() {
    this.setState({
      messages: this.state.messages.concat(this.state.input), 
      input: ""
    });
  }
  
  render() {
    /* i use a arrow function, because it dont need called */
    const items = this.state.messages.map(
      (item, i) => <li key={i}>{item}</li>
    ); 
    
    return (
      <div>
        <h2>Type in a new Message:</h2>
                       
        <input          
          onChange={this.handleChange.bind(this)}
          /* resetea el campo a vacío */
          value={this.state.input}
        />
               
        <button 
          /* hago el binding inline */
          onClick={this.submitMessage.bind(this)}>
          Submit
        </button>

        <ul>{items}</ul>        
      </div>
    );
  }
};