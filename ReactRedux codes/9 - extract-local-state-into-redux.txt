// Redux:
const ADD = 'ADD';

// declaración de una acción que puede ser tratada por messageReducer
const addMessage = (message) => {
  return {
    type: ADD,
    message: message
  }
};

// Unifica todas las acciones y estados
const messageReducer = (state = [], action) => {
  switch (action.type) {
    case ADD:
      return [
        ...state,
        action.message
      ];
    default:
      return state;
  }
};

// React:
class Presentational extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: '',
      // Presentational no se encarga de gestionar los datos, solo mantiene el estado del input
      //messages: [] 
    }
    // Hacemos el binding a los métodos según el contexto actual
    this.handleChange = this.handleChange.bind(this);
    this.submitMessage = this.submitMessage.bind(this);
  }
  handleChange(event) {
    this.setState({
      input: event.target.value
    });
  }
  submitMessage() {    
    this.props.submitNewMessage(this.state.input);
    this.setState({
      input: ''
    });    
  }

  render() {
    return (
      <div>
        <h2>Type in a new Message:</h2>
        <input
          value={this.state.input}
          onChange={this.handleChange}/><br/>
        <button onClick={this.submitMessage}>Submit</button>
        <ul>
          {this.props.messages.map( (message, idx) => {
              return (
                 <li key={idx}>{message}</li>
              )
            })
          }
        </ul>
      </div>
    );
  }
};

// Defino a que estado tendrá acceso el componente
// El reducer también se encarga de gestionar el estado
const mapStateToProps = (state) => {
  return {messages: state}
};

// Defino a que acciones tendrá acceso el componente
// Se trata de una interfaz que deriva a las acciones particulares que tratará el reducer.
const mapDispatchToProps = (dispatch) => {
  return {
    submitNewMessage: (message) => {
      dispatch(addMessage(message))
    }
  }
};

// ReactRedux:

// Creación del store, pasando el método que procesa todas las acciones, a partir de un único estado
const store = Redux.createStore(messageReducer);

// Provider & connect are provides for Reac Redux a small API
// Provider is a wrapper component. It allow to access the Redux store and dispatch functions, from your component's childs.
const Provider = ReactRedux.Provider;
const connect = ReactRedux.connect;

// Establecemos el vínculo entre el componente y el estado junto a las acciones disponibles
const Container = connect(mapStateToProps, mapDispatchToProps)(Presentational);

class AppWrapper extends React.Component {
  render() {
    return (
      <Provider store={store}>
        <Container/>
      </Provider>
    );
  }
};